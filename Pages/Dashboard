import React, { useState, useEffect } from "react";
import { Portfolio } from "@/entities/Portfolio";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, TrendingUp, TrendingDown, DollarSign } from "lucide-react";
import StockList from "../components/dashboard/StockList";
import PortfolioChart from "../components/dashboard/PortfolioChart";
import RecommendationPanel from "../components/dashboard/RecommendationPanel";

export default function Dashboard() {
  const [portfolio, setPortfolio] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadPortfolio();
  }, []);

  const loadPortfolio = async () => {
    try {
      const data = await Portfolio.list("-last_updated");
      setPortfolio(data);
    } catch (error) {
      console.error("Error loading portfolio:", error);
    }
    setLoading(false);
  };

  const totalValue = portfolio.reduce(
    (sum, stock) => sum + stock.quantity * (stock.current_price || 0),
    0
  );

  const totalGain = portfolio.reduce(
    (sum, stock) =>
      sum + stock.quantity * ((stock.current_price || 0) - (stock.purchase_price || 0)),
    0
  );

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold">Portfolio Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Value</CardTitle>
            <DollarSign className="h-4 w-4 text-gray-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${totalValue.toFixed(2)}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Gain/Loss</CardTitle>
            {totalGain >= 0 ? (
              <TrendingUp className="h-4 w-4 text-green-500" />
            ) : (
              <TrendingDown className="h-4 w-4 text-red-500" />
            )}
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${
              totalGain >= 0 ? "text-green-600" : "text-red-600"
            }`}>
              ${Math.abs(totalGain).toFixed(2)}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Positions</CardTitle>
            <BarChart className="h-4 w-4 text-gray-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{portfolio.length}</div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <PortfolioChart portfolio={portfolio} loading={loading} />
          <StockList portfolio={portfolio} loading={loading} onUpdate={loadPortfolio} />
        </div>
        <div>
          <RecommendationPanel portfolio={portfolio} loading={loading} />
        </div>
      </div>
    </div>
  );
}